[gd_resource type="ShaderMaterial" load_steps=8 format=2]

[ext_resource path="res://Building/Material/BuldingAlbedo.tres" type="Texture" id=1]
[ext_resource path="res://Building/Material/BuildingUpperEmission.png" type="Texture" id=2]
[ext_resource path="res://Building/Material/BuildingRoughness.png" type="Texture" id=3]
[ext_resource path="res://Building/Material/BuildingEmission.png" type="Texture" id=4]
[ext_resource path="res://Building/Material/BuildingUpperRoughness.png" type="Texture" id=5]
[ext_resource path="res://Building/Material/BuildingUpperAlbedo.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

varying vec3 pos;

uniform sampler2D lower_albedo;
uniform sampler2D lower_emission;
uniform sampler2D lower_roughness;
uniform sampler2D upper_albedo;
uniform sampler2D upper_emission;
uniform sampler2D upper_roughness;


void vertex(){
	if(VERTEX.y > 0.0){
		VERTEX.y = COLOR.g;
	}else{
		VERTEX.y = -0.5;
	}
	VERTEX.x = VERTEX.x * COLOR.r;
	VERTEX.z = VERTEX.z * COLOR.b;
	pos = VERTEX;
	UV.y = pos.y + 0.5;
	UV.y = -UV.y / 18.0;
	UV.x = UV.x * 3.0;
}

void fragment(){
	vec4 albedo_tex;
	vec4 roughness_tex;
	vec4 emission_tex;
	vec4 normal_tex;
	if(pos.y < 8.5f){
		albedo_tex = texture(lower_albedo, UV);
		emission_tex = texture(lower_emission, UV);
		roughness_tex = texture(lower_roughness, UV);
	}else{
		albedo_tex = texture(upper_albedo, UV);
		emission_tex = texture(upper_emission, UV);
		roughness_tex = texture(upper_roughness, UV);
	}
	ALBEDO = albedo_tex.rgb;
	ROUGHNESS = roughness_tex.g;
	EMISSION = emission_tex.rgb * 5.0;
}"

[resource]
shader = SubResource( 1 )
shader_param/lower_albedo = ExtResource( 1 )
shader_param/lower_emission = ExtResource( 4 )
shader_param/lower_roughness = ExtResource( 3 )
shader_param/upper_albedo = ExtResource( 6 )
shader_param/upper_emission = ExtResource( 2 )
shader_param/upper_roughness = ExtResource( 5 )
