[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://Textures/EnemyTexture_Heart.png" type="Texture" id=1]
[ext_resource path="res://Textures/EnemyTexture_Base.png" type="Texture" id=3]
[ext_resource path="res://Textures/EnemyTexture_Brain.png" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D skin_tex : hint_albedo;
uniform sampler2D brain_emission : hint_albedo;
uniform sampler2D heart_emission : hint_albedo;
uniform sampler2D skin_emission : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec4 emission : hint_color;
uniform float emission_energy;
varying vec3 uv1_triplanar_pos;
varying vec3 uv2_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform float uv2_blend_sharpness;
varying vec3 uv2_power_normal;
uniform vec3 uv1_scale;
varying vec3 uv1_offset;
uniform vec3 uv2_scale;
varying vec3 uv2_offset;

varying vec3 red_tinge;

varying float current_texture;


void vertex() {
	vec3 previous_ball = vec3(INSTANCE_CUSTOM.x,INSTANCE_CUSTOM.y,INSTANCE_CUSTOM.z);
	float size = INSTANCE_CUSTOM.a;
	VERTEX = VERTEX * size;
	float dist = distance(VERTEX,previous_ball);
	if(dist < COLOR.a+size){
		float weight = min(((COLOR.a+size)-dist)+1.0f,1.0f);
		VERTEX = VERTEX*mix(1,(COLOR.a/size)*0.99f,weight);
		VERTEX += mix(vec3(0,0,0),previous_ball,weight);
	}
	uv1_offset = vec3(COLOR.x,COLOR.y,-COLOR.z);
	uv2_offset = vec3(COLOR.y,-COLOR.z,COLOR.x);
	

	current_texture = COLOR.y;
	
	red_tinge = vec3(1.0,1.0-COLOR.x,1.0-COLOR.x);

	
	
	
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,-1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,-1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
	uv2_power_normal=pow(abs(NORMAL), vec3(uv2_blend_sharpness));
	uv2_power_normal/=dot(uv2_power_normal,vec3(1.0));
	uv2_triplanar_pos = VERTEX * uv2_scale + uv2_offset;
	uv2_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}


vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}


void fragment() {
	vec2 base_uv2 = UV2;
	vec4 albedo_tex;
	albedo_tex = triplanar_texture(skin_tex,uv1_power_normal,uv1_triplanar_pos);
	
	vec4 emission_tex = triplanar_texture(skin_emission, uv2_power_normal, uv2_triplanar_pos);
	int tex = int(round(current_texture));
	if(tex == 1){
		emission_tex = triplanar_texture(brain_emission,uv2_power_normal,uv2_triplanar_pos);
	}else if(tex == 2){
		emission_tex = triplanar_texture(heart_emission,uv2_power_normal,uv2_triplanar_pos);
	}
	
	EMISSION = (emission.rgb+emission_tex.rgb) * emission_energy * ((sin(TIME / 2.0f) + 2.0f)/3.0f);
	ALBEDO = albedo.rgb * albedo_tex.rgb * red_tinge;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}

"

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0, 0, 0, 1, 0, 0, 0, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.5
shader_param/roughness = 0.9
shader_param/point_size = 1.0
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 1.0
shader_param/uv1_blend_sharpness = 1.0
shader_param/uv2_blend_sharpness = 1.0
shader_param/uv1_scale = Vector3( 0.25, 0.25, 0.25 )
shader_param/uv2_scale = Vector3( 0.25, 0.25, 0.25 )
shader_param/skin_tex = ExtResource( 3 )
shader_param/brain_emission = ExtResource( 4 )
shader_param/heart_emission = ExtResource( 1 )
shader_param/skin_emission = SubResource( 3 )
