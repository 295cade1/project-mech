[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Assets/Environment/Water/WaterNoise.tres" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled;

uniform float height_scale = 10f;
uniform float speed = 1;
uniform sampler2D noise;

uniform vec3 player_pos;
 
varying vec3 pos;

float getHeight(vec2 position, float time) {
  vec2 offset = 0.01 * cos(position + time);
  return texture(noise, (position / 10.0) - offset).x;
}

bool vert_test(vec3 vertex){
	float edge_dist = 200.0;
	if(vertex.x < -edge_dist){
		return false;
	}
	if(vertex.x > edge_dist){
		return false;
	}
	if(vertex.z < -edge_dist){
		return false;
	}
	if(vertex.z > edge_dist){
		return false;
	}
	return true;
}

//16 verts to edge
void vertex() {
	NORMAL = normalize(vec3(0,1,0));
	vec3 initalVert = VERTEX;
	VERTEX.xz = VERTEX.xz + player_pos.xz;
	VERTEX.x = float(int(VERTEX.x/13.0f) * 13);
	VERTEX.z = float(int(VERTEX.z/13.0f) * 13);
	if(vert_test(initalVert)){
		vec2 position = VERTEX.xz/10f;
		float k = getHeight(position, TIME*speed);
		VERTEX.y += float(height_scale) * (k-0.5);
		pos = VERTEX;
		NORMAL = normalize(vec3(k - getHeight(position + vec2(0.1, 0.0), TIME), 0.1, k - getHeight(position + vec2(0.0, 0.1), TIME)));
	}
	VERTEX.xz = VERTEX.xz - player_pos.xz;
}

void fragment() {
	if( distance( pos, player_pos ) > 2.4){
		float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
		RIM = 0.05;
		METALLIC = 0.1;
		ROUGHNESS = 0.05 * (1.0 - fresnel);
		ALBEDO = vec3(0.1, 0.15, 0.25) + (0.1 * fresnel);
		ALPHA = 0.9f;
	}else{
		ALPHA = 0.0f;
	}
}

"

[resource]
shader = SubResource( 1 )
shader_param/height_scale = 20.0
shader_param/speed = 2.0
shader_param/player_pos = Vector3( 0, 10, 0 )
shader_param/noise = ExtResource( 1 )
